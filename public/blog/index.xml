<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Yusuke Ohashi</title><link>https://yusuke.cloud/blog/</link><description>Recent content in Blogs on Yusuke Ohashi</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 12 Apr 2020 20:09:21 +0900</lastBuildDate><atom:link href="https://yusuke.cloud/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 101</title><link>https://yusuke.cloud/blog/2020/04/12/java-101/</link><pubDate>Sun, 12 Apr 2020 20:09:21 +0900</pubDate><guid>https://yusuke.cloud/blog/2020/04/12/java-101/</guid><description>今更Javaについて書くのもどうかと思うけれど、あらためて知識をまとめておきたいと思ったので、 IntelliJ IdeaでJavaを始めるに当たって、知っておいたほうがよさそうなことを書いていきます。 個人的なまとめノートです。
Javaをインストールする際に気を付けること 現在、OracleJDKを使う場合、無償利用は個人利用、開発用途のみとなっています。 勉強用にJavaを使うには一向に気にする必要はないのですが、プロダクションでJavaを使おうと思っている人は有償になるので、注意が必要です。
様々なバイナリーが提供されており、かつ様々なベンダーが有償サポートを提供しており、Java界隈、お金の匂いがすごい。笑 ちょっと調べてみた限り、どれがベストかはよくわからなかったのですが、お金を気にせず使うという点では、AdoptOpenJDK(HotSpot) のLTSを選んでおけば、大丈夫そうです。 よほどのエンタープライズ環境でもない限り、または自力で問題解決できるのであれば、ずっと無償で使っていくことができます。
サポート期間（バグ修正など）がどこまで続くかは以下で確認してください。
https://adoptopenjdk.net/support.html
とはいえ、Swiftのように、オープンソースとはいえ、Appleにロックインしている言語で、face to faceでの対応を年一のWWDCでしか提供せず、しかも抽選かつ高額であるのに比べれば、有償サポートというのもユースケースによってはアリなのでしょう。Swiftはforumもありますが、ベストエフォートで回答がもらえるとは限らず、個別のケースに対応してもらうことはほぼ不可能です。(筆者はSwiftを普段メインで使っています)
Javaを何に使うのか まずは、アルゴリズムの勉強や、競プロなどに使おうと思っています。 また様々なライブラリ、アーキテクチャがJavaから生まれ、またFunctional Programmingといった従来のJavaにはなかったプログラミングパラダイムも取り入れられて、総合的にCSを勉強する題材としてはJavaはベストな選択肢かなと思います。 Go、Rustなどのように尖ってはいませんので、いまいちパッとしないイメージがありましたが、一周回って便利な言語です。
——最後に、きしださんの思う「Javaが持つ良さ」について教えてください。
きしだ　Javaは全部ができる言語だということですね。デスクトップアプリも、サーバーサイドも、スマホアプリも、業務系のアプリもサービス系のアプリもできる。機械学習は、まだそんなに向いていないですけど、き&amp;gt; っと将来的にはもっと楽にできるようになる。Javaを習得することで、さまざまな領域に手を出せるのが利点だと思ってます。
それから先ほども話に出たように、Javaは新しい要素技術にフィットしていこうとする努力を続けていますから、その流れに追従していくと自分自身が新しい技術を勉強するモチベーションになります。言語だけではく、ライブラリやフレームワーク、実行系も全部まとめてJavaなんです。守備範囲の広さが、Javaの一番いいところですよね。
(from: https://employment.en-japan.com/engineerhub/entry/2019/10/29/103000)
main functionを作成する Javaの特徴（？）にHello Worldまでが長いというのがあります。 Javaアプリケーションを動かすときはまず、main functionが必要です。 いつもコピペするのは面倒なので、main&amp;hellip;と打ち始めることで自動的に関数を作成すると便利です。
https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html
ビルドツールについて知る 以下のものが有名である。
ant + ivy maven gradle 今からJavaで新しいプロジェクトを作成する際はほとんどが、gradleたまにmavenって感じだと思います。 gradle、mavenは普段から使っているので慣れていますが、antはほとんど使ったことがないです。今後も使うことはないでしょうが、少しまとめておきます。
ant 今挙げた中では、もっとも古いビルドツールである。 NetBeansではいまだに使われていました（驚）。
Javaで書かれ、汎用ビルドツールとして作られたそうで、C言語のコンパイル等にも使用できるそうですが、実際に使われていることは見たことがありません。笑 独自の拡張(antlibs)を作り固有のタスクを追加していくことができるそうです。
タスクの定義には、Makefileの代わりに、build.xmlというファイルを使用します。
ant自体にはモジュールの依存管理機能は含まれておりません。クラスパスにjarファイルを置くことで依存を追加できますが、自動的に管理するにはivyを導入します。
ivy 依存管理ツール。mavenよりシンプルなxmlで依存管理を記述できる。antを補完する形で使うのが一般的のようです。
以下のようなivy.xmlを作成します。
&amp;lt;ivy-module version=&amp;#34;2.0&amp;#34;&amp;gt; &amp;lt;info organisation=&amp;#34;org.apache&amp;#34; module=&amp;#34;hello-ivy&amp;#34;/&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency org=&amp;#34;commons-lang&amp;#34; name=&amp;#34;commons-lang&amp;#34; rev=&amp;#34;2.0&amp;#34;/&amp;gt; &amp;lt;dependency org=&amp;#34;commons-cli&amp;#34; name=&amp;#34;commons-cli&amp;#34; rev=&amp;#34;1.</description></item><item><title>LSP for Swift</title><link>https://yusuke.cloud/blog/2020/04/07/lsp-for-swift/</link><pubDate>Tue, 07 Apr 2020 18:01:03 +0900</pubDate><guid>https://yusuke.cloud/blog/2020/04/07/lsp-for-swift/</guid><description>What is Language Server Protocol(LSP)? Language Server Protocol defines standardized protocol with which both a text editor or IDE(client) and a language(server) communicate. The protocol is based on JSONRPC. A client(text editor) can implement Go to definition Error and warnings Auto completion &amp;hellip; https://microsoft.github.io/language-server-protocol/overviews/lsp/overview/
Solves m-times-n complexity problems What is Sourcekit-LSP? Apple&amp;rsquo;s LSP implementation on top of sourcekitd and clangd sourcekitd is a framework that provide IDE features clangd for c-family languages (C/C++/ObjC) language server supports only Swift Package Manager project As of Xcode 11.</description></item><item><title>Jekyll4</title><link>https://yusuke.cloud/blog/2019/09/08/jekyll4/</link><pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate><guid>https://yusuke.cloud/blog/2019/09/08/jekyll4/</guid><description>Today I upgraded Jekyll to 4.0.0. This is my note from this migration.
The only issue that I encountered is deployment on netlify. I am making use of netlify for staging testing.
There are 2 versions that you may consider when you are also a netlify user.
Ruby Version Currently default Ruby version on netlify is 2.3.6. However, Jekyll 4 requires Ruby &amp;gt; 2.4.0. But no worry. There is a workaround.</description></item><item><title>You need bundler 2.0 or later</title><link>https://yusuke.cloud/blog/2019/05/17/you-need-bundler-2.0-or-later/</link><pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate><guid>https://yusuke.cloud/blog/2019/05/17/you-need-bundler-2.0-or-later/</guid><description>I faced a deployment issue of this blog.
I am using Travis CI and Dokku to automate deployment. Both platforms are using the latest bundler(for now it&amp;rsquo;s 2.0.1). I&amp;rsquo;ve been using bundler 1.17.3, since I don&amp;rsquo;t need to upgrade it.
Since ruby 2.3.0, bundler &amp;gt;= 2.0 is preferrable unless you have specific reasons, like you are working on Rails &amp;lt; 4.2. I recommend you to upgrade your infrastructures if you are managing them.</description></item><item><title>2018 in review</title><link>https://yusuke.cloud/blog/2019/01/11/2018-in-review/</link><pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate><guid>https://yusuke.cloud/blog/2019/01/11/2018-in-review/</guid><description>2018 was yet another awesome year.
Commitments in work I worked on building mobile development foundation.
Jenkins CI Exapansion I read this book to learn Jenkins(written in Japanese). Aside from maintaining jenkins, I learned to modify several Jenkins modules, such as Git plugin.(We are using my forked Git plugin now.)
Open API Specification OpenAPI Initiative
Side projects This blog I moved this blog to Linode. What I exactly did is that I moved my blog on docker on Linode instance.</description></item><item><title>Network Abstraction Layer</title><link>https://yusuke.cloud/blog/2018/11/10/network-abstraction-layer/</link><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid>https://yusuke.cloud/blog/2018/11/10/network-abstraction-layer/</guid><description>I am experimenting a new way for network request in Kiri library. Kiri is Moya inspired abstract networking layer. I was very impressed by Moya architecture, so to learn from it the most, I decided to trace the same architecture by writing by myself, instead of copy and paste. :D
We need to break down client library into three parts.
Request Normally, you have to construct networking request every time. Instead, in Kiri, your network configuration is compiled in one place, like class, enum.</description></item><item><title>Crontab Guru</title><link>https://yusuke.cloud/blog/2018/09/12/crontab-guru/</link><pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate><guid>https://yusuke.cloud/blog/2018/09/12/crontab-guru/</guid><description>If you use google whenever you write crontab, this website is good for you.
crontab guru
Crontab format is not intuitive. This website tells you how your cron will work. You can input your own cron job in the rounded textfield, and you can check how it works before you start on your server. It will help you avoid significant mistakes before deploying your job.</description></item><item><title>Check npm dependency graph visually</title><link>https://yusuke.cloud/blog/2018/09/11/check-npm-dependency-graph-visually/</link><pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate><guid>https://yusuke.cloud/blog/2018/09/11/check-npm-dependency-graph-visually/</guid><description>I found the awesome tool to visualize npm dependency graph.
This example shows dependency graph of react-native-maps, which I was investigating last night.
https://npm.anvaka.com/#/view/2d/react-native-maps
2D You can drag nodes, and highlight node with cursor on.
3D You can rotate graph, but 3D doesn&amp;rsquo;t show module names.
https://npm.anvaka.com/ Github</description></item><item><title>Rails or Django?</title><link>https://yusuke.cloud/blog/2018/08/28/rails-or-django/</link><pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate><guid>https://yusuke.cloud/blog/2018/08/28/rails-or-django/</guid><description>Now I cannot decide which to go. Please write down your comments below if you have any opinion on it.</description></item></channel></rss>